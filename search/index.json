[{"content":"LLVM下载与编译 参考链接LLVM编译进行，下面演示常用流程\n1. 下载LLVM源代码 1  git clone https://github.com/llvm/llvm-project.git   2. 配置LLVM编译选项 1 2 3  cd llvm-project cmake -S llvm -B build -G \u0026#34;Unix Makefiles\u0026#34; -DLLVM_ENABLE_PROJECTS=\u0026#34;clang;lldb;compiler-rt\u0026#34; -DCMAKE_INSTALL_PREFIX=/home/xxx/llvm14   3. 编译LLVM 1 2 3  cd build make -j make install   LLVM开发环境配置 1. 将编译出来的LLVM添加到PATH，这样可以使用llvm编译出来的各种工具 1 2  export PATH=/home/xxx/llvm14/bin:$PATH export LD_LIBRARY_PATH=/home/xxx/llvm14/lib:$LD_LIBRARY_PATH    因为llvm的链接器lld仍然在开发中,需要使用gcc的链接器ld,所以如果使用clang进行编译的话只能编译到目标文件,最后将目标文件链接起来使用gcc的工具\n 2. 创建项目，以如下代码作为示例： 1 2 3 4 5 6 7 8 9  #include \u0026lt;iostream\u0026gt;#include \u0026#34;llvm/ADT/SmallVector.h\u0026#34; int main() { llvm::SmallVector\u0026lt;int, 10\u0026gt; s_vec; s_vec.push_back(10); s_vec.push_back(20); std::cout \u0026lt;\u0026lt; \u0026#34;sum is \u0026#34; \u0026lt;\u0026lt; s_vec[0] + s_vec[1] \u0026lt;\u0026lt; std::endl; }   编写项目CMakeLists.txt文件\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  cmake_minimum_required(VERSION 3.10)project(main)#set(LLVM_DIR /home/xxx/llvm14/lib/cmake/llvm) (if can\u0026#39;t find llvm set) find_package(LLVM 14.0 REQUIRED CONFIG)if (NOT LLVM_FOUND) message(FATAL_ERROR \u0026#34;LLVM NOT FOUND\u0026#34;)endif()include_directories(${LLVM_INCLUDE_DIRS})add_definitions(${LLVM_DEFINITIONS})llvm_map_components_to_libnames(llvm_libs bitreader core support)add_executable(main main.cc)target_link_libraries(main ${llvm_libs})   如果LLVM使用find_package无法找到，需要设置LLVM_DIR变量，将LLVM编译后的cmake module查找路径加入cmake module 搜索路径，并且使用CONFIG的导入模式\n  llvm_map_components_to_libnames是比较老的映射库名称接口，可以使用新的llvm-config命令来查找需要使用的参数，比如查询所有的llvm库名称，使用命令llvm-config \u0026ndash;components即可，将需要的库填入map函数\n 3. 编译运行 ","date":"2022-04-25T00:00:00Z","permalink":"https://autumorn.github.io/p/llvm%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97%E4%B8%80/","title":"LLVM学习系列(一)"},{"content":"VSCODE环境配置  工欲善其事，必先利其器\n 1. vscode安装 官网(https://code.visualstudio.com/)根据不同的平台下载对应的安装包直接进行安装\n2. c++编译环境插件安装  c/c++ : 可以进行c++支持标准的设置以及IntelliSense的相关设置 cMake : 基础的cmake插件功能 cMake Tools : 配置cmake编译功能，打开extension settings设置，主要配置cmake generator(可选择ninja、Unix Makefiles等generator),如果需要加参数运行，需要点击左侧debug按钮、创建launch.json文件并进行相关配置  3. markdown插件安装 Markdown All in One 安装完成后可以进行相关设置，根据配置选项说明进行调整\n4. 远程及浏览器开发环境配置 vscode远程开发有两种方式：\n 本地安装vscode通过remote ssh插件方式在vscode中连接远程服务器进行开发，需要在本地安装vscode软件 远程服务器配置code server，可以在本地浏览器中打开vscode进行开发，只需要浏览器就可随地进行开发  这里介绍下面一种的配置方式，实现在浏览器开发的功能，有一键安装与离线安装两种方式，下面分别进行介绍\n一键式安装 在服务器中利用如下命令进行安装：\n1 2 3 4  [测试安装过程] curl -fsSL https://code-server.dev/install.sh | sh -s -- --dry-run [开始安装] curl -fsSL https://code-server.dev/install.sh | sh   安装成功会有提示，在命令行执行code-server来查看是否安装功能，为了以后使用方便，可以利用systemctl注册服务使用，或者直接运行code-server\n1  sudo systemctl enable --now code-server@$USER    现在可以访问 http://远程ip地址:8080. 你的密码可以在 ~/.config/code-server/config.yaml 中设置。如果访问不了，可以将config.yaml中的ip设置为0.0.0.0试一下，端口注意不要用已经被占用的端口，配置完成后在浏览器输入网址及密码即可进入vscode，其它操作同vscode本地\n 离线安装 从github上搜索code server下载最新的deb安装包进行安装，安装完成配置步骤与在线安装一致\n1 2 3  curl -fOL https://github.com/cdr/code-server/releases/download/v$VERSION/code-server_$VERSION_amd64.deb sudo dpkg -i code-server_$VERSION_amd64.deb sudo systemctl enable --now code-server@$USER   ","date":"2022-04-25T00:00:00Z","permalink":"https://autumorn.github.io/p/vscode%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/","title":"VSCODE环境配置"},{"content":"GCC源代码编译安装 检查及安装服务器上编译环境，以ubuntu为例 1  sudo apt-get install build-essential wget m4 flex bison   下载需要的GCC版本源代码，可以利用wget下载，以10.3.0为例 1 2  wget https://ftpmirror.gnu.org/gcc/gcc-10.3.0/gcc-10.3.0.tar.gz tar xvf gcc-10.3.0.tar.gz   下载依赖的库 1 2  cd gcc-10.3.0 ./contrib/download_prerequisties   编译有两种，一种直接在源代码中编译，一种编译放在单独的目录，这里演示分开目录编译 1 2 3 4  cd .. mkdir build cd build ../gcc-10.3.0/configure -v --build=x86_64-linux-gnu --host=x86_64-linux-gnu --target=x86_64-linux-gnu --prefix=/opt/gcc-10.3.0 --enable-checking=release --enable-languages=c,c++,fortran --disable-multilib --program-suffix=-10.3    编译选项可以查询官网说明，这里以最常用的方式为例\n 编译与安装 1 2  make -j sudo make install-strip   GCC多版本管理 版本管理利用update-alternatives工具，在linux上是一个比较好用的工具，下面以GCC举例说明，假如在机器上存在以下两个版本的GCC\n1 2  /opt/gcc-9.3.0 /opt/gcc-10.3.0   首先查看update-alternatives中已经注册的版本 1  sudo update-alternatives --display gcc   利用update-alternatives注册新安装的尚未注册的多个版本（假设上面查询结果为空） 1 2  sudo update-alternatives --install /usr/bin/gcc gcc /opt/gcc-9.3.0/bin/gcc-9.3 50 sudo update-alternatives --install /usr/bin/gcc gcc /opt/gcc-10.3.0/bin/gcc-9.3 100    后面的数字表示该版本的优先级，当设置在auto模式时，优先级最高的版本生效\n 配置版本 1  sudo update-alternatives --config gcc    可以选择特定的版本或者是auto模式\n 删除某一版本，假如需要删除gcc-9.3的版本 1  sudo update-alternatives --remove gcc /opt/gcc-9.3.0/bin/gcc-9.3   ","date":"2022-04-14T00:00:00Z","permalink":"https://autumorn.github.io/p/linux%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85gcc%E5%8F%8A%E5%A4%9A%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/","title":"Linux编译安装GCC及多版本管理"},{"content":"MLIR的背景 ","date":"2022-04-13T00:00:00Z","permalink":"https://autumorn.github.io/p/mlir%E7%B3%BB%E5%88%97%E4%B8%80%E6%A0%B7%E4%BE%8B%E8%A7%A3%E6%9E%90/","title":"MLIR系列(一)样例解析"},{"content":"基本配置 vim在不安装组件的情况下拥有很多基本的功能，首先我们需要对常用的基本配置进行设置，基本配置已经足够日常使用，基本配置及其相关注释如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59  \u0026#34; Basic Settings set nocompatible \u0026#34; detect file type filetype on \u0026#34; load plugin for detected file type filetype plugin on \u0026#34; load indent file for detected file type filetype indent on \u0026#34; syntax highlight syntax on set encoding=UTF-8 \u0026#34; Add numbers to each line on the left-hand side. set number \u0026#34; highlight current line set cursorline \u0026#34; Set shift width to 4 spaces. set shiftwidth=2 \u0026#34; Set tab width to 4 columns. set tabstop=4 \u0026#34; Use space characters instead of tabs. set expandtab \u0026#34; Set indent style set cindent set smartindent set autoindent \u0026#34; Do not save backup files. set nobackup \u0026#34; Do not let cursor scroll below or above N number of lines when scrolling. set scrolloff=10 \u0026#34; set font set guifont=DroidSansMono_Nerd_Font:h11 \u0026#34; Use highlighting when doing a search. set hlsearch \u0026#34; While searching though a file incrementally highlight matching characters as you type. set incsearch \u0026#34; Ignore capital letters during search. set ignorecase \u0026#34; Override the ignorecase option if searching for capital letters. \u0026#34; This will allow you to search specifically for capital letters. set smartcase \u0026#34; Show partial command you type in the last line of the screen. set showcmd \u0026#34; Show the mode you are on the last line. set showmode \u0026#34; Show matching words during a search. set showmatch \u0026#34; Set the commands to save in history default number is 20. set history=1000 \u0026#34; Enable auto completion menu after pressing TAB. set wildmenu \u0026#34; Make wildmenu behave like similar to Bash completion. set wildmode=list:longest \u0026#34; There are certain files that we would never want to edit with Vim. \u0026#34; Wildmenu will ignore files with these extensions. set wildignore=*.docx,*.jpg,*.png,*.gif,*.pdf,*.pyc,*.exe,*.flv,*.img,*.xlsx   插件安装 使用vim_plug插件管理器，并在vimrc配置文件中添加如下代码：\n1 2 3 4 5 6 7 8 9 10  \u0026#34; -------------------------------- Plugin ------------------------------------------- \u0026#34; Specify a directory for plugins \u0026#34; - For Neovim: stdpath(\u0026#39;data\u0026#39;) . \u0026#39;/plugged\u0026#39; \u0026#34; - Avoid using standard Vim directory names like \u0026#39;plugin\u0026#39; call plug#begin(\u0026#39;~/.vim/plugged\u0026#39;) \u0026#34; Initialize plugin system call plug#end()   常用插件及管理 将插件的名称与github上的仓库加入call plugin begin 与 end之间即可， 然后打开vim使用PlugInstall进行安装，插件管理命令如下所示：\n   Command Description     PlugInstall [name \u0026hellip;] [#threads] Install plugins   PlugUpdate [name \u0026hellip;] [#threads] Install or update plugins   PlugClean[!] Remove unlisted plugins (bang version will clean without prompt)   PlugUpgrade Upgrade vim-plug itself   PlugStatus Check the status of plugins   PlugDiff Examine changes from the previous update and the pending changes    NERDTree 主要安装NERDTree以及git组件，可以在目录中显示git状态，加入如下两行代码进行安装：\n1 2  Plug \u0026#39;scrooloose/nerdtree\u0026#39;, { \u0026#39;on\u0026#39;: \u0026#39;NERDTreeToggle\u0026#39; } Plug \u0026#39;Xuyuanp/nerdtree-git-plugin\u0026#39;   插件相关配置如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  \u0026#34; set NerdTree plugin nnoremap \u0026lt;leader\u0026gt;n :NERDTreeFocus\u0026lt;CR\u0026gt; nnoremap \u0026lt;C-n\u0026gt; :NERDTree\u0026lt;CR\u0026gt; nnoremap \u0026lt;C-t\u0026gt; :NERDTreeToggle\u0026lt;CR\u0026gt; \u0026#34; nnoremap \u0026lt;C-f\u0026gt; :NERDTreeFind\u0026lt;CR\u0026gt; \u0026#34; Start NERDTree when Vim starts with a directory argument. autocmd StdinReadPre * let s:std_in=1 autocmd VimEnter * if argc() == 1 \u0026amp;\u0026amp; isdirectory(argv()[0]) \u0026amp;\u0026amp; !exists(\u0026#39;s:std_in\u0026#39;) | \\ execute \u0026#39;NERDTree\u0026#39; argv()[0] | wincmd p | enew | execute \u0026#39;cd \u0026#39;.argv()[0] | endif \u0026#34; Exit Vim if NERDTree is the only window remaining in the only tab. autocmd BufEnter * if tabpagenr(\u0026#39;$\u0026#39;) == 1 \u0026amp;\u0026amp; winnr(\u0026#39;$\u0026#39;) == 1 \u0026amp;\u0026amp; exists(\u0026#39;b:NERDTree\u0026#39;) \u0026amp;\u0026amp; b:NERDTree.isTabTree() | quit | endif \u0026#34; Close the tab if NERDTree is the only window remaining in it. autocmd BufEnter * if winnr(\u0026#39;$\u0026#39;) == 1 \u0026amp;\u0026amp; exists(\u0026#39;b:NERDTree\u0026#39;) \u0026amp;\u0026amp; b:NERDTree.isTabTree() | quit | endif \u0026#34; Start NERDTree. If a file is specified, move the cursor to its window. autocmd StdinReadPre * let s:std_in=1 autocmd VimEnter * NERDTree | if argc() \u0026gt; 0 || exists(\u0026#34;s:std_in\u0026#34;) | wincmd p | endif   Taglist 功能：利用ctags生成当前文件所有的类以及类型符号 使用taglist需要满足的条件有：\n 打开文件的自己检测功能：filetype on 系统中安装exuberant ctags工具 并且vim支持system()调用  然后在vimrc中添加安装taglist的地址：\n1  Plug \u0026#39;vim-scripts/taglist.vim\u0026#39;   安装之后进行相关的配置：\n1 2 3 4 5 6 7  \u0026#34; set TagList plugin let Tlist_Ctags_Cmd=\u0026#34;/usr/local/bin/ctags\u0026#34; let Tlist_Use_Right_Window = 1 let Tlist_Exit_OnlyWindow = 1 let Tlist_Show_One_File = 1 \u0026#34; let Tlist_Sort_Type = \u0026#34;name\u0026#34; let Tlist_Auto_Open = 1   DelimitMate 功能：自动匹配括号与引号 安装地址及相关配置如下：\n1 2 3 4 5 6 7 8  Plug \u0026#39;Raimondi/delimitMate\u0026#39; \u0026#34; set DelimitMate plugin \u0026#34; close auto close function \u0026#34; let b:delimitMate_autoclose = 0 \u0026#34; close auto close function for python files \u0026#34; au FileType python let b:delimitMate_autoclose = 0 let delimitMate_expand_cr = 1   ctags \u0026amp; cscope \u0026amp; srcexpl 功能：跳转功能的实现，方便在编写代码的时候查看类或者其它结构的实现 安装srcexpl插件：\n1  Plug \u0026#39;wenlongche/SrcExpl\u0026#39;   安装后的配置如下:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42  \u0026#34; set ctags generation and path function Generate_cstag() if(executable(\u0026#39;cscope\u0026#39;) \u0026amp;\u0026amp; has(\u0026#34;cscope\u0026#34;)) silent! execute \u0026#34;!find-L`pwd`-name\u0026#39;*.h\u0026#39;-o-name\u0026#39;*.c\u0026#39;-o-name\u0026#39;*.cc\u0026#39;-o-name\u0026#39;*.cpp\u0026#39;-o-name\u0026#39;*.java\u0026#39;-o-name\u0026#39;*.cxx\u0026#39;-o-name\u0026#39;*.hxx\u0026#39;-o-name\u0026#39;*.hpp\u0026#39;-o-name\u0026#39;*.py\u0026#39;\u0026gt;cscope.files\u0026#34; endif silent! execute \u0026#34;!ctags-Lcscope.files\u0026#34; silent! execute \u0026#34;!cscope-bkq-icscope.files\u0026#34; silent! execute \u0026#34;callAdd_cstag()\u0026#34; endf function Add_cstag() if filereadable(\u0026#34;cscope.out\u0026#34;) execute \u0026#34;csaddcscope.out\u0026#34; execute \u0026#34;settags+=./tags\u0026#34; endif endf silent! execute \u0026#34;callAdd_cstag()\u0026#34; map \u0026lt;F10\u0026gt; :call Generate_cstag()\u0026lt;CR\u0026gt; map \u0026lt;F10\u0026gt;\u0026lt;F10\u0026gt; :call Add_cstag()\u0026lt;CR\u0026gt; nmap \u0026lt;C-\\\u0026gt;s :cs find s \u0026lt;C-R\u0026gt;=expand(\u0026#34;\u0026lt;cword\u0026gt;\u0026#34;)\u0026lt;CR\u0026gt;\u0026lt;CR\u0026gt; nmap \u0026lt;C-\\\u0026gt;g :cs find g \u0026lt;C-R\u0026gt;=expand(\u0026#34;\u0026lt;cword\u0026gt;\u0026#34;)\u0026lt;CR\u0026gt;\u0026lt;CR\u0026gt; nmap \u0026lt;C-\\\u0026gt;c :cs find c \u0026lt;C-R\u0026gt;=expand(\u0026#34;\u0026lt;cword\u0026gt;\u0026#34;)\u0026lt;CR\u0026gt;\u0026lt;CR\u0026gt; nmap \u0026lt;C-\\\u0026gt;t :cs find t \u0026lt;C-R\u0026gt;=expand(\u0026#34;\u0026lt;cword\u0026gt;\u0026#34;)\u0026lt;CR\u0026gt;\u0026lt;CR\u0026gt; nmap \u0026lt;C-\\\u0026gt;e :cs find e \u0026lt;C-R\u0026gt;=expand(\u0026#34;\u0026lt;cword\u0026gt;\u0026#34;)\u0026lt;CR\u0026gt;\u0026lt;CR\u0026gt; nmap \u0026lt;C-\\\u0026gt;f :cs find f \u0026lt;C-R\u0026gt;=expand(\u0026#34;\u0026lt;cword\u0026gt;\u0026#34;)\u0026lt;CR\u0026gt;\u0026lt;CR\u0026gt; nmap \u0026lt;C-\\\u0026gt;i :cs find i \u0026lt;C-R\u0026gt;=expand(\u0026#34;\u0026lt;cword\u0026gt;\u0026#34;)\u0026lt;CR\u0026gt;\u0026lt;CR\u0026gt; nmap \u0026lt;C-\\\u0026gt;d :cs find d \u0026lt;C-R\u0026gt;=expand(\u0026#34;\u0026lt;cword\u0026gt;\u0026#34;)\u0026lt;CR\u0026gt;\u0026lt;CR\u0026gt; \u0026#34;setsrcexplpluginnmap\u0026lt;F8\u0026gt;:SrcExplToggle\u0026lt;CR\u0026gt;letg:SrcExpl_winHeight=16letg:SrcExpl_refreshTime=100letg:SrcExpl_jumpKey=\u0026#34;\u0026lt;ENTER\u0026gt;\u0026#34;letg:SrcExpl_gobackKey=\u0026#34;\u0026lt;SPACE\u0026gt;\u0026#34;letg:SrcExpl_searchLocalDef=1letg:SrcExpl_isUpdateTags=0letg:SrcExpl_updateTagsCmd=\u0026#34;ctags --sort=foldcase -R .\u0026#34;letg:SrcExpl_updateTagsKey=\u0026#34;\u0026lt;F12\u0026gt;\u0026#34;letg:SrcExpl_prevDefKey=\u0026#34;\u0026lt;F3\u0026gt;\u0026#34;letg:SrcExpl_nextDefKey=\u0026#34;\u0026lt;F4\u0026gt;\u0026#34;  ","date":"2020-09-09T00:00:00Z","permalink":"https://autumorn.github.io/p/vim-configuration/","title":"vim configuration"}]