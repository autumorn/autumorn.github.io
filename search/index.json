[{"content":"第一个段落 ","date":"2022-03-26T15:02:37+08:00","permalink":"https://autumorn.github.io/p/dummy/","title":"Dummy"},{"content":"正文测试 而这些并不是完全重要，更加重要的问题是， 带着这些问题，我们来审视一下学生会退会。 既然如何， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 我们不得不面对一个非常尴尬的事实，那就是， 可是，即使是这样，学生会退会的出现仍然代表了一定的意义。 学生会退会，发生了会如何，不发生又会如何。 经过上述讨论， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 学生会退会，到底应该如何实现。 这样看来， 在这种困难的抉择下，本人思来想去，寝食难安。 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 就我个人来说，学生会退会对我的意义，不能不说非常重大。 莎士比亚曾经提到过，人的一生是短的，但如果卑劣地过这一生，就太长了。这似乎解答了我的疑惑。 莫扎特说过一句富有哲理的话，谁和我一样用功，谁就会和我一样成功。这启发了我， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 学生会退会，到底应该如何实现。 一般来说， 从这个角度来看， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 在这种困难的抉择下，本人思来想去，寝食难安。 了解清楚学生会退会到底是一种怎么样的存在，是解决一切问题的关键。 一般来说， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 问题的关键究竟为何？ 而这些并不是完全重要，更加重要的问题是。\n奥斯特洛夫斯基曾经说过，共同的事业，共同的斗争，可以使人们产生忍受一切的力量。　带着这句话，我们还要更加慎重的审视这个问题： 一般来讲，我们都必须务必慎重的考虑考虑。 既然如此， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 带着这些问题，我们来审视一下学生会退会。 我认为， 我认为， 在这种困难的抉择下，本人思来想去，寝食难安。 问题的关键究竟为何？ 每个人都不得不面对这些问题。 在面对这种问题时， 要想清楚，学生会退会，到底是一种怎么样的存在。 我认为， 既然如此， 每个人都不得不面对这些问题。 在面对这种问题时， 那么， 我认为， 学生会退会因何而发生。\n引用  思念是最暖的忧伤像一双翅膀\n让我停不了飞不远在过往游荡\n不告而别的你 就算为了我着想\n这么沉痛的呵护 我怎么能翱翔\n最暖的憂傷 - 田馥甄\n 图片 1 2 3  ![Photo by Florian Klauer on Unsplash](florian-klauer-nptLmg6jqDo-unsplash.jpg) ![Photo by Luca Bravo on Unsplash](luca-bravo-alS7ewQ41M8-unsplash.jpg) ![Photo by Helena Hertz on Unsplash](helena-hertz-wWZzXlDpMog-unsplash.jpg) ![Photo by Hudai Gayiran on Unsplash](hudai-gayiran-3Od_VKcDEAA-unsplash.jpg)   相册语法来自 Typlog\n","date":"2020-09-09T00:00:00Z","permalink":"https://autumorn.github.io/p/test-chinese/","title":"Chinese Test"},{"content":"基本配置 vim在不安装组件的情况下拥有很多基本的功能，首先我们需要对常用的基本配置进行设置，基本配置已经足够日常使用，基本配置及其相关注释如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59  \u0026#34; Basic Settings set nocompatible \u0026#34; detect file type filetype on \u0026#34; load plugin for detected file type filetype plugin on \u0026#34; load indent file for detected file type filetype indent on \u0026#34; syntax highlight syntax on set encoding=UTF-8 \u0026#34; Add numbers to each line on the left-hand side. set number \u0026#34; highlight current line set cursorline \u0026#34; Set shift width to 4 spaces. set shiftwidth=2 \u0026#34; Set tab width to 4 columns. set tabstop=4 \u0026#34; Use space characters instead of tabs. set expandtab \u0026#34; Set indent style set cindent set smartindent set autoindent \u0026#34; Do not save backup files. set nobackup \u0026#34; Do not let cursor scroll below or above N number of lines when scrolling. set scrolloff=10 \u0026#34; set font set guifont=DroidSansMono_Nerd_Font:h11 \u0026#34; Use highlighting when doing a search. set hlsearch \u0026#34; While searching though a file incrementally highlight matching characters as you type. set incsearch \u0026#34; Ignore capital letters during search. set ignorecase \u0026#34; Override the ignorecase option if searching for capital letters. \u0026#34; This will allow you to search specifically for capital letters. set smartcase \u0026#34; Show partial command you type in the last line of the screen. set showcmd \u0026#34; Show the mode you are on the last line. set showmode \u0026#34; Show matching words during a search. set showmatch \u0026#34; Set the commands to save in history default number is 20. set history=1000 \u0026#34; Enable auto completion menu after pressing TAB. set wildmenu \u0026#34; Make wildmenu behave like similar to Bash completion. set wildmode=list:longest \u0026#34; There are certain files that we would never want to edit with Vim. \u0026#34; Wildmenu will ignore files with these extensions. set wildignore=*.docx,*.jpg,*.png,*.gif,*.pdf,*.pyc,*.exe,*.flv,*.img,*.xlsx   插件安装 使用vim_plug插件管理器，并在vimrc配置文件中添加如下代码：\n1 2 3 4 5 6 7 8 9 10  \u0026#34; -------------------------------- Plugin ------------------------------------------- \u0026#34; Specify a directory for plugins \u0026#34; - For Neovim: stdpath(\u0026#39;data\u0026#39;) . \u0026#39;/plugged\u0026#39; \u0026#34; - Avoid using standard Vim directory names like \u0026#39;plugin\u0026#39; call plug#begin(\u0026#39;~/.vim/plugged\u0026#39;) \u0026#34; Initialize plugin system call plug#end()   常用插件及管理 将插件的名称与github上的仓库加入call plugin begin 与 end之间即可， 然后打开vim使用PlugInstall进行安装，插件管理命令如下所示：\n   Command Description     PlugInstall [name \u0026hellip;] [#threads] Install plugins   PlugUpdate [name \u0026hellip;] [#threads] Install or update plugins   PlugClean[!] Remove unlisted plugins (bang version will clean without prompt)   PlugUpgrade Upgrade vim-plug itself   PlugStatus Check the status of plugins   PlugDiff Examine changes from the previous update and the pending changes    NERDTree 主要安装NERDTree以及git组件，可以在目录中显示git状态，加入如下两行代码进行安装：\n1 2  Plug \u0026#39;scrooloose/nerdtree\u0026#39;, { \u0026#39;on\u0026#39;: \u0026#39;NERDTreeToggle\u0026#39; } Plug \u0026#39;Xuyuanp/nerdtree-git-plugin\u0026#39;   插件相关配置如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  \u0026#34; set NerdTree plugin nnoremap \u0026lt;leader\u0026gt;n :NERDTreeFocus\u0026lt;CR\u0026gt; nnoremap \u0026lt;C-n\u0026gt; :NERDTree\u0026lt;CR\u0026gt; nnoremap \u0026lt;C-t\u0026gt; :NERDTreeToggle\u0026lt;CR\u0026gt; \u0026#34; nnoremap \u0026lt;C-f\u0026gt; :NERDTreeFind\u0026lt;CR\u0026gt; \u0026#34; Start NERDTree when Vim starts with a directory argument. autocmd StdinReadPre * let s:std_in=1 autocmd VimEnter * if argc() == 1 \u0026amp;\u0026amp; isdirectory(argv()[0]) \u0026amp;\u0026amp; !exists(\u0026#39;s:std_in\u0026#39;) | \\ execute \u0026#39;NERDTree\u0026#39; argv()[0] | wincmd p | enew | execute \u0026#39;cd \u0026#39;.argv()[0] | endif \u0026#34; Exit Vim if NERDTree is the only window remaining in the only tab. autocmd BufEnter * if tabpagenr(\u0026#39;$\u0026#39;) == 1 \u0026amp;\u0026amp; winnr(\u0026#39;$\u0026#39;) == 1 \u0026amp;\u0026amp; exists(\u0026#39;b:NERDTree\u0026#39;) \u0026amp;\u0026amp; b:NERDTree.isTabTree() | quit | endif \u0026#34; Close the tab if NERDTree is the only window remaining in it. autocmd BufEnter * if winnr(\u0026#39;$\u0026#39;) == 1 \u0026amp;\u0026amp; exists(\u0026#39;b:NERDTree\u0026#39;) \u0026amp;\u0026amp; b:NERDTree.isTabTree() | quit | endif \u0026#34; Start NERDTree. If a file is specified, move the cursor to its window. autocmd StdinReadPre * let s:std_in=1 autocmd VimEnter * NERDTree | if argc() \u0026gt; 0 || exists(\u0026#34;s:std_in\u0026#34;) | wincmd p | endif   Taglist 功能：利用ctags生成当前文件所有的类以及类型符号 使用taglist需要满足的条件有：\n 打开文件的自己检测功能：filetype on 系统中安装exuberant ctags工具 并且vim支持system()调用  然后在vimrc中添加安装taglist的地址：\n1  Plug \u0026#39;vim-scripts/taglist.vim\u0026#39;   安装之后进行相关的配置：\n1 2 3 4 5 6 7  \u0026#34; set TagList plugin let Tlist_Ctags_Cmd=\u0026#34;/usr/local/bin/ctags\u0026#34; let Tlist_Use_Right_Window = 1 let Tlist_Exit_OnlyWindow = 1 let Tlist_Show_One_File = 1 \u0026#34; let Tlist_Sort_Type = \u0026#34;name\u0026#34; let Tlist_Auto_Open = 1   DelimitMate 功能：自动匹配括号与引号 安装地址及相关配置如下：\n1 2 3 4 5 6 7 8  Plug \u0026#39;Raimondi/delimitMate\u0026#39; \u0026#34; set DelimitMate plugin \u0026#34; close auto close function \u0026#34; let b:delimitMate_autoclose = 0 \u0026#34; close auto close function for python files \u0026#34; au FileType python let b:delimitMate_autoclose = 0 let delimitMate_expand_cr = 1   ctags \u0026amp; cscope \u0026amp; srcexpl 功能：跳转功能的实现，方便在编写代码的时候查看类或者其它结构的实现 安装srcexpl插件：\n1  Plug \u0026#39;wenlongche/SrcExpl\u0026#39;   安装后的配置如下:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42  \u0026#34; set ctags generation and path function Generate_cstag() if(executable(\u0026#39;cscope\u0026#39;) \u0026amp;\u0026amp; has(\u0026#34;cscope\u0026#34;)) silent! execute \u0026#34;!find-L`pwd`-name\u0026#39;*.h\u0026#39;-o-name\u0026#39;*.c\u0026#39;-o-name\u0026#39;*.cc\u0026#39;-o-name\u0026#39;*.cpp\u0026#39;-o-name\u0026#39;*.java\u0026#39;-o-name\u0026#39;*.cxx\u0026#39;-o-name\u0026#39;*.hxx\u0026#39;-o-name\u0026#39;*.hpp\u0026#39;-o-name\u0026#39;*.py\u0026#39;\u0026gt;cscope.files\u0026#34; endif silent! execute \u0026#34;!ctags-Lcscope.files\u0026#34; silent! execute \u0026#34;!cscope-bkq-icscope.files\u0026#34; silent! execute \u0026#34;callAdd_cstag()\u0026#34; endf function Add_cstag() if filereadable(\u0026#34;cscope.out\u0026#34;) execute \u0026#34;csaddcscope.out\u0026#34; execute \u0026#34;settags+=./tags\u0026#34; endif endf silent! execute \u0026#34;callAdd_cstag()\u0026#34; map \u0026lt;F10\u0026gt; :call Generate_cstag()\u0026lt;CR\u0026gt; map \u0026lt;F10\u0026gt;\u0026lt;F10\u0026gt; :call Add_cstag()\u0026lt;CR\u0026gt; nmap \u0026lt;C-\\\u0026gt;s :cs find s \u0026lt;C-R\u0026gt;=expand(\u0026#34;\u0026lt;cword\u0026gt;\u0026#34;)\u0026lt;CR\u0026gt;\u0026lt;CR\u0026gt; nmap \u0026lt;C-\\\u0026gt;g :cs find g \u0026lt;C-R\u0026gt;=expand(\u0026#34;\u0026lt;cword\u0026gt;\u0026#34;)\u0026lt;CR\u0026gt;\u0026lt;CR\u0026gt; nmap \u0026lt;C-\\\u0026gt;c :cs find c \u0026lt;C-R\u0026gt;=expand(\u0026#34;\u0026lt;cword\u0026gt;\u0026#34;)\u0026lt;CR\u0026gt;\u0026lt;CR\u0026gt; nmap \u0026lt;C-\\\u0026gt;t :cs find t \u0026lt;C-R\u0026gt;=expand(\u0026#34;\u0026lt;cword\u0026gt;\u0026#34;)\u0026lt;CR\u0026gt;\u0026lt;CR\u0026gt; nmap \u0026lt;C-\\\u0026gt;e :cs find e \u0026lt;C-R\u0026gt;=expand(\u0026#34;\u0026lt;cword\u0026gt;\u0026#34;)\u0026lt;CR\u0026gt;\u0026lt;CR\u0026gt; nmap \u0026lt;C-\\\u0026gt;f :cs find f \u0026lt;C-R\u0026gt;=expand(\u0026#34;\u0026lt;cword\u0026gt;\u0026#34;)\u0026lt;CR\u0026gt;\u0026lt;CR\u0026gt; nmap \u0026lt;C-\\\u0026gt;i :cs find i \u0026lt;C-R\u0026gt;=expand(\u0026#34;\u0026lt;cword\u0026gt;\u0026#34;)\u0026lt;CR\u0026gt;\u0026lt;CR\u0026gt; nmap \u0026lt;C-\\\u0026gt;d :cs find d \u0026lt;C-R\u0026gt;=expand(\u0026#34;\u0026lt;cword\u0026gt;\u0026#34;)\u0026lt;CR\u0026gt;\u0026lt;CR\u0026gt; \u0026#34;setsrcexplpluginnmap\u0026lt;F8\u0026gt;:SrcExplToggle\u0026lt;CR\u0026gt;letg:SrcExpl_winHeight=16letg:SrcExpl_refreshTime=100letg:SrcExpl_jumpKey=\u0026#34;\u0026lt;ENTER\u0026gt;\u0026#34;letg:SrcExpl_gobackKey=\u0026#34;\u0026lt;SPACE\u0026gt;\u0026#34;letg:SrcExpl_searchLocalDef=1letg:SrcExpl_isUpdateTags=0letg:SrcExpl_updateTagsCmd=\u0026#34;ctags --sort=foldcase -R .\u0026#34;letg:SrcExpl_updateTagsKey=\u0026#34;\u0026lt;F12\u0026gt;\u0026#34;letg:SrcExpl_prevDefKey=\u0026#34;\u0026lt;F3\u0026gt;\u0026#34;letg:SrcExpl_nextDefKey=\u0026#34;\u0026lt;F4\u0026gt;\u0026#34;  ","date":"2020-09-09T00:00:00Z","permalink":"https://autumorn.github.io/p/vim-configuration/","title":"vim configuration"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution  Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\n Blockquote with attribution  Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.— Rob Pike1 Tables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\n   Name Age     Bob 27   Alice 23    Inline Markdown within tables    Italics Bold Code     italics bold code       A B C D E F     Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus ultricies, sapien non euismod aliquam, dui ligula tincidunt odio, at accumsan nulla sapien eget ex. Proin eleifend dictum ipsum, non euismod ipsum pulvinar et. Vivamus sollicitudin, quam in pulvinar aliquam, metus elit pretium purus Proin sit amet velit nec enim imperdiet vehicula. Ut bibendum vestibulum quam, eu egestas turpis gravida nec Sed scelerisque nec turpis vel viverra. Vivamus vitae pretium sapien    Code Blocks Code block with backticks 1 2 3 4 5 6 7 8 9 10  \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;   Code block indented with four spaces \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Code block with Hugo\u0026rsquo;s internal highlight shortcode 1 2 3 4 5 6 7 8 9 10  \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;   Diff code block 1 2 3 4 5  [dependencies.bevy] git = \u0026#34;https://github.com/bevyengine/bevy\u0026#34; rev = \u0026#34;11f52b8c72fc3a568e8bb4a4cd1f3eb025ac2e13\u0026#34; - features = [\u0026#34;dynamic\u0026#34;] + features = [\u0026#34;jpeg\u0026#34;, \u0026#34;dynamic\u0026#34;]   List Types Ordered List  First item Second item Third item  Unordered List  List item Another item And another item  Nested list  Fruit  Apple Orange Banana   Dairy  Milk Cheese    Other Elements — abbr, sub, sup, kbd, mark GIFis a bitmap image format.\nH2O\nXn+ Yn= ZnPress CTRL+ALT+Deleteto end the session.\nMost salamandersare nocturnal, and hunt for insects, worms, and other small creatures.\nHyperlinked image \n  The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n  ","date":"2019-03-11T00:00:00Z","image":"https://autumorn.github.io/p/markdown-syntax-guide/pawel-czerwinski-8uZPynIu-rQ-unsplash_hud7e36f7e20e71be184458283bdae4646_55974_120x120_fill_q75_box_smart1.jpg","permalink":"https://autumorn.github.io/p/markdown-syntax-guide/","title":"Markdown Syntax Guide"},{"content":"Hugo ships with several Built-in Shortcodes for rich content, along with a Privacy Config and a set of Simple Shortcodes that enable static and no-JS versions of various social media embeds.\n YouTube Privacy Enhanced Shortcode  Twitter Simple Shortcode  Vimeo Simple Shortcode Gist Shortcode","date":"2019-03-10T00:00:00Z","permalink":"https://autumorn.github.io/p/rich-content/","title":"Rich Content"},{"content":"Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.\nIn this example we will be using KaTeX\n Create a partial under /layouts/partials/math.html Within this partial reference the Auto-render Extension or host these scripts locally. Include the partial in your templates like so:  1 2 3  {{ if or .Params.math .Site.Params.math }} {{ partial \u0026#34;math.html\u0026#34; . }} {{ end }}    To enable KaTex globally set the parameter math to true in a project\u0026rsquo;s configuration To enable KaTex on a per page basis include the parameter math: true in content files  Note: Use the online reference of Supported TeX Functions\nExamples Block math: $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$\n","date":"2019-03-08T00:00:00Z","permalink":"https://autumorn.github.io/p/math-typesetting/","title":"Math Typesetting"},{"content":"Emoji can be enabled in a Hugo project in a number of ways.\nThe emojify function can be called directly in templates or Inline Shortcodes.\nTo enable emoji globally, set enableEmoji to true in your site\u0026rsquo;s configuration and then you can type emoji shorthand codes directly in content files; e.g.\nThe Emoji cheat sheet is a useful reference for emoji shorthand codes.\n N.B. The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.\n1 2 3  .emoji { font-family: Apple Color Emoji, Segoe UI Emoji, NotoColorEmoji, Segoe UI Symbol, Android Emoji, EmojiSymbols; }  ","date":"2019-03-05T00:00:00Z","image":"https://autumorn.github.io/p/emoji-support/the-creative-exchange-d2zvqp3fpro-unsplash_huf941de4769045cdfa8c9ee7036519a2a_35369_120x120_fill_q75_box_smart1.jpg","permalink":"https://autumorn.github.io/p/emoji-support/","title":"Emoji Support"}]